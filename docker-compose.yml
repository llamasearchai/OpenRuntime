version: '3.8'

services:
  # =============================================================================
  # OpenRuntime Enhanced Main Service
  # =============================================================================
  openruntime:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: openruntime_enhanced
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/openruntime
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - openruntime_network

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: openruntime_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-openruntime123}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - openruntime_network

  # =============================================================================
  # PostgreSQL Database Service
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: openruntime_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=openruntime
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - openruntime_network

  # =============================================================================
  # Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: openruntime_prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - openruntime_network

  # =============================================================================
  # Grafana Dashboard
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: openruntime_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - openruntime_network

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: openruntime_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - openruntime
    restart: unless-stopped
    networks:
      - openruntime_network

  # =============================================================================
  # Celery Worker for Background Tasks
  # =============================================================================
  celery_worker:
    build:
      context: .
      target: production
    container_name: openruntime_celery_worker
    command: celery -A openruntime_enhanced.celery worker --loglevel=info --concurrency=4
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/openruntime
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - openruntime_network

  # =============================================================================
  # Celery Beat Scheduler
  # =============================================================================
  celery_beat:
    build:
      context: .
      target: production
    container_name: openruntime_celery_beat
    command: celery -A openruntime_enhanced.celery beat --loglevel=info
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/openruntime
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - openruntime_network

  # =============================================================================
  # Development Service (Alternative to production)
  # =============================================================================
  openruntime_dev:
    build:
      context: .
      target: development
    container_name: openruntime_dev
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/openruntime
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - openruntime_network
    profiles:
      - dev

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  openruntime_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16