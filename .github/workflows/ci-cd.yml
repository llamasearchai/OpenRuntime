name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  RUST_VERSION: "1.70"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          pip install -r requirements.txt
          
      - name: Black code formatting check
        run: black --check --diff .
        
      - name: isort import sorting check
        run: isort --check-only --diff .
        
      - name: Flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: MyPy type checking
        run: mypy openruntime_enhanced/ --ignore-missing-imports
        
      - name: Bandit security linting
        run: bandit -r . -f json -o bandit-report.json
        
      - name: Safety dependency check
        run: safety check --json --output safety-report.json
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # Rust Components
  # =============================================================================
  rust-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true
          
      - name: Rust formatting check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path rust-openai-crate/Cargo.toml -- --check
          
      - name: Clippy linting
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path rust-openai-crate/Cargo.toml -- -D warnings
          
      - name: Build Rust components
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path rust-openai-crate/Cargo.toml --release
          
      - name: Run Rust tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path rust-openai-crate/Cargo.toml

  # =============================================================================
  # Python Testing
  # =============================================================================
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run unit tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: |
          python -m pytest tests/ -v --cov=openruntime_enhanced --cov-report=xml --cov-report=html
          
      - name: Run integration tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: |
          python -m pytest tests/test_integration.py -v --tb=short
          
      - name: Run performance tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: |
          python -m pytest tests/test_performance.py -v --tb=short
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Docker Build and Test
  # =============================================================================
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-python, rust-build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.enhanced
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.ref_name }}
            VCS_REF=${{ github.sha }}
            
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -p 8001:8001 \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
          # Wait for container to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:8001/ || exit 1
          
          # Test AI endpoint
          curl -f -X POST http://localhost:8001/ai/tasks \
            -H "Content-Type: application/json" \
            -d '{"workflow_type":"system_analysis","prompt":"test"}' || exit 1
            
          # Stop container
          docker stop test-container

  # =============================================================================
  # Performance Benchmarks
  # =============================================================================
  benchmark:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark
          
      - name: Run performance benchmarks
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: |
          python -m pytest tests/test_performance.py \
            --benchmark-only \
            --benchmark-json=benchmark.json
            
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here
          
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, benchmark]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here
          
      - name: Create deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "OpenRuntime Enhanced ${{ github.ref_name }} deployed to production"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # Release Creation
  # =============================================================================
  create-release:
    runs-on: ubuntu-latest
    needs: [test-python, rust-build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ```
          draft: false
          prerelease: false 